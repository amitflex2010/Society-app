
 [   {
        "tenant_id":1,
        "tenant_name": "Amit T",
        "Subject": "Bathroom is choking. Please fix it.",
        "details":"We are talking about server-side JS here. Suppose someone is parsing user-supplied JSON. If the assumption is that the JSON is always well formed, an attacker can send some malformed JSON to trigger an error, which if spilled to the client side, may reveal vital information about the system. Or if the JSON was both malformed and contained some text with <script>..., and the error is spilled to the client side, you have an XSS bug right there. Therefore IMO it's important to handle JSON errors right where you parse it.",
        "status":"pending",
        "date": "2017-08-17"
    },
    {
        "tenant_id":2,
        "tenant_name": "Amit T1",
        "Subject": "Bathroom is choking. Please fix it.",
        "details":"We are talking about server-side JS here. Suppose someone is parsing user-supplied JSON. If the assumption is that the JSON is always well formed, an attacker can send some malformed JSON to trigger an error, which if spilled to the client side, may reveal vital information about the system. Or if the JSON was both malformed and contained some text with <script>..., and the error is spilled to the client side, you have an XSS bug right there. Therefore IMO it's important to handle JSON errors right where you parse it.",
        "status":"pending",
        "date": "2017-08-17"
    },
    {
        "tenant_id":3,
        "tenant_name": "Amit T2",
        "Subject": "Bathroom is choking. Please fix it.",
        "details":"We are talking about server-side JS here. Suppose someone is parsing user-supplied JSON. If the assumption is that the JSON is always well formed, an attacker can send some malformed JSON to trigger an error, which if spilled to the client side, may reveal vital information about the system. Or if the JSON was both malformed and contained some text with <script>..., and the error is spilled to the client side, you have an XSS bug right there. Therefore IMO it's important to handle JSON errors right where you parse it.",
        "status":"pending",
        "date": "2017-08-17"
    },
    {
        "tenant_id":4,
        "tenant_name": "Amit T3",
        "Subject": "Bathroom is choking. Please fix it.",
        "details":"We are talking about server-side JS here. Suppose someone is parsing user-supplied JSON. If the assumption is that the JSON is always well formed, an attacker can send some malformed JSON to trigger an error, which if spilled to the client side, may reveal vital information about the system. Or if the JSON was both malformed and contained some text with <script>..., and the error is spilled to the client side, you have an XSS bug right there. Therefore IMO it's important to handle JSON errors right where you parse it.",
        "status":"pending",
        "date": "2017-08-17"
    },
    {
        "tenant_id":5,
        "tenant_name": "Amit T4",
        "Subject": "Bathroom is choking. Please fix it1.",
        "details":"We are talking about server-side JS here. Suppose someone is parsing user-supplied JSON. If the assumption is that the JSON is always well formed, an attacker can send some malformed JSON to trigger an error, which if spilled to the client side, may reveal vital information about the system. Or if the JSON was both malformed and contained some text with <script>..., and the error is spilled to the client side, you have an XSS bug right there. Therefore IMO it's important to handle JSON errors right where you parse it.",
        "status":"pending",
        "date": "2017-08-17"
    }]
